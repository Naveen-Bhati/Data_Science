#!/usr/bin/env python
# coding: utf-8

# In[1]:


from sklearn import datasets
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from matplotlib import pyplot as plt
import numpy as np
import pandas as pd


# In[2]:


boston = datasets.load_boston()
bos = pd.DataFrame(boston.data, columns = boston.feature_names)
bos['PRICE'] = boston.target
print(bos.head())


# In[3]:


bos.isnull().sum()


# In[4]:


print(bos.describe())


# In[10]:


plt.hist(bos['Price'],bins = 30)
plt.show()


#  model evaluation for only 1 feature_name

# In[5]:


X_rooms = bos.RM
Y_price = bos.PRICE
X_rooms = np.array(X_rooms).reshape(-1,1)
Y_price = np.array(Y_price).reshape(-1,1)
print(X_rooms.shape)
print(Y_price.shape)


# In[6]:


X_train_1,X_test_1,Y_train_1,Y_test_1 = train_test_split(X_rooms,Y_price, test_size =.2, random_state =5)
print(X_train_1.shape)
print(X_test_1.shape)
print(Y_train_1.shape)
print(Y_test_1.shape)


# In[7]:


# training model for 1 feature_name
reg_1 = LinearRegression()
reg_1.fit(X_train_1 , Y_train_1)
y_train_pred_1 = reg_1.predict(X_train_1)
rmse = (np.sqrt(mean_squared_error(Y_train_1,y_train_pred_1)))
r2 = round(reg_1.score(X_train_1,Y_train_1),2)

print("the model performance for training set:  ")
print("-----------------------------------------")
print("RMSE is{}".format(rmse))
print("R2 is {}".format(r2))


# In[8]:


prediction_space = np.linspace(min(X_rooms),max(X_rooms)).reshape(-1,1)
plt.scatter(X_rooms,Y_price)
plt.plot(prediction_space,reg_1.predict(prediction_space),linewidth = 5,color ="black")
plt.xlabel("value of house/1000$")
plt.ylabel("no. of rooms")
plt.show()


# #### model evalution for all feature_names
# 

# In[10]:


X = bos.drop(["PRICE"], axis=1)
y = bos['PRICE']

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

reg_all = LinearRegression()
reg_all.fit(X_train,y_train)

y_train_predict = reg_all.predict(X_train)

rmse = (np.sqrt(mean_squared_error(y_train,y_train_predict)))
r3 = round(reg_all.score(X_train,y_train),3)

print("The model performance for training set")
print("---------------")
print("RMSE is {}".format(rmse))
print("R3 is {}".format(r3))



# In[11]:


# evalution for test data

y_pred = reg_all.predict(X_test)

rmse = (np.sqrt(mean_squared_error(y_pred,y_test)))
r4 = round(reg_all.score(X_test,y_test),4)
print("Model performance for test data is:  ")
print('RMSE is{} '.format(rmse))
print('r4 score is {}'.format(r4))


# In[12]:


plt.scatter(y_test , y_pred)
plt.xlabel("Actual House Prices($1000)")
plt.ylabel("Predicted House Prices: ($1000)")
plt.xticks(range(0,int(max(y_test)),4))
plt.yticks(range(0,int(max(y_test)),4))
plt.title("Actual Prices vs predicted Prices")


# In[ ]:




